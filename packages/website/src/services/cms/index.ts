import { getAllEntries } from '@pkg/next-mdx/src/mdx'
import { Redirect } from 'next/types'
import { ArticleEntry, Entry, EntryType, PageEntry } from '#/services/cms/types'

const allPages = getAllEntries(EntryType.Page).map(entry => ({
  ...entry,
  url: `/${entry.slug}`,
}))

const allArticles = getAllEntries(EntryType.Article).map(entry => ({
  ...entry,
  url: `/news/${entry.slug}`,
}))

function getAllPages(): PageEntry[] {
  return allPages
}

function getPageBySlug(slug: string): PageEntry | null {
  const entry = allPages.find(page => page.slug === slug)
  return entry ?? null
}

function getAllArticles(): ArticleEntry[] {
  return allArticles
}

function getArticleBySlug(slug: string): ArticleEntry | null {
  const entry = allArticles.find(article => article.slug === slug)
  return entry ?? null
}

export function toSortedIndex(entries: Entry[]): Entry[] {
  return entries
    .filter((entry: Entry) => {
      // keep if it should be autogenerated and not a draft
      return entry.isAutogenerated !== false && !entry.isDraft
    })
    .sort((a, b) => Number(new Date(b.createdAt)) - Number(new Date(a.createdAt)))
}

type StaticProps<EntryType> =
  | {
      props: { entry: EntryType }
      revalidate?: number | boolean
      redirect?: never
      notFound?: never
    }
  | { props?: never; revalidate?: number | boolean; redirect: Redirect; notFound?: never }
  | { props?: never; revalidate?: number | boolean; redirect?: never; notFound: true }

export function getPageStaticProps(
  slug: string,
  revalidateAfter = 60 * 15
): StaticProps<PageEntry> {
  return _getEntryStaticProps(getPageBySlug(slug), revalidateAfter)
}

export function getArticleStaticProps(
  slug: string,
  revalidateAfter = 60 * 15
): StaticProps<ArticleEntry> {
  return _getEntryStaticProps(getArticleBySlug(slug), revalidateAfter)
}

function _getEntryStaticProps<T extends Entry>(
  entry: T | null,
  revalidateAfter = 60 * 15
): StaticProps<T> {
  if (!entry) {
    return {
      notFound: true,
    }
  }

  return {
    props: {
      entry: entry as T,
    },
    revalidate: revalidateAfter, // see https://www.youtube.com/watch?v=X0-6lyxj1_Q
  }
}

export { getPageBySlug, getArticleBySlug, getAllArticles, getAllPages }
export * from './types'
