import { SimpleSearchIndex } from '@pkg/utils/src/searching/algos/SimpleSearchIndex'

import { DexPokemon } from '../dexes/types'
import { GameSetId } from '../games/types'
import { PokemonRegion } from '../locations/types'
import { PokemonType } from '../types/types'
import { LegacyPokemonEntryMinimal, LegacyPokemonEntryMinimalMap } from './legacy_types'

// Generated by https://quicktype.io
export interface RawPokemonEntry {
  id: string
  nid: string
  dexNum: number
  formId: null | string
  name: string
  formName: null | string
  region: PokemonRegion
  generation: number
  type1: PokemonType
  type2: PokemonType | null
  color: PokemonColor
  abilities: PokemonAbilities
  isLegendary: boolean
  isMythical: boolean
  isUltraBeast: boolean
  ultraBeastCode: null | string
  isDefault: boolean
  isForm: boolean
  isSpecialAbilityForm: boolean
  isCosmeticForm: boolean
  isFemaleForm: boolean
  hasGenderDifferences: boolean
  isBattleOnlyForm: boolean
  isSwitchableForm: boolean
  isFusion: boolean
  fusedWith: Array<string[]> | null
  isMega: boolean
  isPrimal: boolean
  isRegional: boolean
  isGmax: boolean
  canGmax: boolean
  canDynamax: boolean
  canBeAlpha: boolean
  debutIn: GameSetId
  obtainableIn: GameSetId[]
  versionExclusiveIn: string[]
  eventOnlyIn: GameSetId[]
  storableIn: GameSetId[]
  shinyReleased: boolean
  shinyBase: null | string
  baseStats: PokemonBaseStats
  goStats: PokemonGoStats
  weight: PokemonSize
  height: PokemonSize
  maleRate: number
  femaleRate: number
  refs: PokemonExternalRefs
  baseSpecies: null | string
  baseForms: string[]
  forms: string[] | null
  evolutions: string[]
}

export interface PokemonSize {
  avg: number
  min: number
  max: number
  alpha: number
}

export interface PokemonExternalRefs {
  pogo: null | string
  veekunDb: null | string
  smogon: string
  showdown: string
  showdownDef: string
  serebii: string
  bulbapedia: string
  homeSprite: string
  miniSprite: string
}

export interface PokemonAbilities {
  primary: string
  secondary: null | string
  hidden: null | string
}

export interface PokemonBaseStats {
  hp: number
  atk: number
  def: number
  spa: number
  spd: number
  spe: number
}

export enum PokemonColor {
  Black = 'black',
  Blue = 'blue',
  Brown = 'brown',
  Gray = 'gray',
  Green = 'green',
  Pink = 'pink',
  Purple = 'purple',
  Red = 'red',
  White = 'white',
  Yellow = 'yellow',
}

export interface PokemonGoStats {
  atk: number
  def: number
  sta: number
}

export type PokemonEntry = {
  id: string
  dexNum: number | null
  name: string
  type1: PokemonType
  type2: PokemonType | null
  color: PokemonColor
  shiny: PokemonEntryShiny
  form: PokemonEntryForm
  location: PokemonEntryLocation
}

export type SearchablePokemonEntry = PokemonEntry & {
  searchText: string
}

export type PokemonEntrySearchIndex = SimpleSearchIndex<SearchablePokemonEntry[]>

export type PokemonEntryShiny = {
  base: string | null
  released: boolean
}

export type PokemonEntryForm = {
  isForm: boolean
  baseSpecies: string | null
  // baseForms: string[]
  isFemaleForm: boolean
  isMaleForm: boolean
  hasGenderForms: boolean
  hasGmax: boolean
}

export type PokemonEntryLocation = {
  obtainableIn: GameSetId[]
  // versionExclusiveIn: GameId[]
  eventOnlyIn: GameSetId[]
  storableIn: GameSetId[]
}

export type PokemonEntryMap = Map<string, PokemonEntry>

export type PokemonRepository = {
  getPokemonEntries: () => LegacyPokemonEntryMinimal[]
  getPokemonEntriesMap: () => LegacyPokemonEntryMinimalMap
  getPokemonEntry: (pokemonId: string) => LegacyPokemonEntryMinimal
  isCatchable: (pokemon: DexPokemon) => boolean
  isShinyLocked: (pokemonId: string) => boolean
  canGmax: (pokemonId: string) => boolean
}
