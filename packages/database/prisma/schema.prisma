// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//
// PlanetScale guide: 
//    https://planetscale.com/docs/prisma/prisma-quickstart
//    https://planetscale.com/docs/prisma/prisma-best-practices
//
//    The recommended workflow with using Prisma alongside PlanetScale,
//    is to use  "prisma db push" instead of "prisma migrate".

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  // Auth.JS-required--------------------------
  id               String            @id @default(cuid())
  email            String?           @unique @db.VarChar(255)
  emailVerified    DateTime?
  image            String?           @db.Text()
  accounts         Account[]
  sessions         Session[]
  // -----------------------------------------
  userName         String?
  displayName      String?
  roles            Json?
  adminRoles       Json?
  firebaseAccounts FirebaseAccount[]
  livingDexes      LivingDex[]
}

model VerificationToken {
  identifier String
  token      String   @unique @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model FirebaseAccount {
  uid             String      @id
  userId          String?
  email           String?     @db.VarChar(255)
  emailVerified   Boolean?
  displayName     String?     @db.Text()
  photoUrl        String?     @db.Text()
  providerId      String?
  creationTime    DateTime?
  lastSignInTime  DateTime?
  lastRefreshTime DateTime?
  livingDexes     LivingDex[]

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model LivingDex {
  uid            String    @id @default(cuid())
  userId         String?
  fbAccountId    String?
  schemaVer      Int?
  title          String?   @db.VarChar(255)
  gameId         String?   @db.VarChar(50)
  data           Json
  creationTime   DateTime
  lastUpdateTime DateTime?

  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  fbAccount FirebaseAccount? @relation(fields: [fbAccountId], references: [uid], onDelete: Cascade)

  @@index([userId])
  @@index([fbAccountId])
}
